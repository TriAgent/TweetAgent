generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authenticated bot twitter account - singleton
model XPublisherAccount {
  updatedAt DateTime @default(now())

  userId         String @unique // X user id eg: 1849649146669695000
  userName       String // X user name eg: Proctar Elastos
  userScreenName String // X user name eg: proctar2626

  accessToken  String // X access token for this user, after web/pin authorization
  accessSecret String // X secret token for this user, after web/pin authorization

  PostedXPost XPost[]
}

// Third party X account to map usernames with user ids
model XAccount {
  userId         String @unique // X user id eg: 1849649146669695000
  userName       String // X user name eg: Proctar Elastos
  userScreenName String // X user name eg: proctar2626

  // Specific to: airdrop contest
  airdropAddress String? // Blockchain address where to airdrop tokens if this user wins a contest competition

  updatedAt DateTime @default(now())
}

// Post retrieved from X. 
// Can be from various sources, for example:
// - a news post from a third party account
// - a post from any user in reply to one of our bot's posts.
// - our bot replies
// - our bot summaries
//
// IMPORTANT NOTE: a post can be retrieved from various services. Keep in mind that its content might remain neutral
// no matter where it was fetched from, especially from posts created by third parties. For example the summary bot can
// fetch posts as third party news but that post might be used by another bot during its operations. They just work 
// on different fields.
model XPost {
  id String @unique @default(uuid())

  createdAt        DateTime  @default(now()) // Entry creation date
  publishRequestAt DateTime? // If this is a post we want to send, this is the date at which we asked to sed this post.
  publishedAt      DateTime? // Post published date

  // Raw X data
  text         String // Core post content
  postId       String? // ID of the post of X
  parentPostId String? // Parent post (id on X) - direct "replied to" = null if root
  rootPostId   String? // Parent post (id on X) - root tweet - usually, the tweet created by our bot - same as post id if root
  quotedPostId String? // Post (id on X) that we quote with this post (RT with message).
  authorId     String // X user id

  // Specific to: news summary
  isRealNews     Boolean? // Whether this post is considered as a real crypto news by our AI or not - only for news posts
  summarizedBy   XPost?   @relation(name: "SourcePosts", fields: [summarizedById], references: [id])
  summarizedById String?

  // Specific to: bot summaries
  summarySourcePosts XPost[] @relation(name: "SourcePosts") // source posts used to produce the summary

  // Specific to: User replies to our bot
  wasReplyHandled Boolean @default(false) // For third party replies to our posts, whether we have analyzed it (reply or not, post reply)

  // Specific to: our bot's published posts
  account                XPublisherAccount? @relation(fields: [publisherAccountUserId], references: [userId]) // Bot account used to send the tweet
  publisherAccountUserId String?

  // Specific to: airdrop contest
  worthForAirdropContest    Boolean? // Whether this post is deemed worth to join the airdrop contest. 
  quotedForAirdropContestAt DateTime? // If this post got elected to be RT/quoted by our account, that's the date at which the post was created/scheduled
}

enum OperationHistoryType {
  FetchAccountsPosts
  FetchPostsWeAreMentionnedIn
}

// History of operations such as post fetched from X. Used for example to 
// know where to resume to save API data usage.
model OperationHistory {
  id        String               @unique @default(uuid())
  type      OperationHistoryType
  createdAt DateTime             @default(now()) // Fetch date
}

model WebPage {
  id          String    @unique @default(uuid())
  createdAt   DateTime  @default(now()) // Entry creation date
  contentDate DateTime? // If known, date at which the web page was written/published
}
