BOTS / FEATURES rework:
- features: toggle enabled from UI - default false
- bug: edited prompts are not saved
- bot twitter auth from UI
- make real X bot run again
- nav: combo box for active bot selection
- Posts browser (browses ACTIVE bot DB posts)
  - list posts (as if we were following everything)
  - create a simulated post (select user which is different from bot)
  - reply to post
  - quote post
- xpost: isSimulated field (for tests)

AIRDROPS:
- New features: 
  - Backend:
      - apis:
        - copy ai prompts from another bot
        - reset ai prompts to default
      - template DB / editing
        - Ability to add/remove bots from UI
      - simulated posts/publish ability
  - Frontend
    - dashboard (desktop only):
      - permanent left menu drawer: 
      - Ability to edit prompts
        - First import from templates folder into DB. Then use DB template. Edit DB from UI.
          TBD: test vs prod mode? test before activation?
      - Ability to simulate posts without interacting with X, in order to quickly test various templates
        - Hardcoded list of users
        - Create a root post, or a reply, or quote, as a user. 
        - maintain structure like X, but with fake ids and fake post boolean in DB
      - View live X activity (posts, answers, stats, etc)
        - Mimic "posts and replies" of the bot account on X
- airdrop ELA (ESC ok) - 1000 ELA / month
- tests:
  - mention in the contest post content
  - mention as a reply (not as quote)
- other ideas:
  - support for NFT airdrops?
  - daily announcement of what token/amount is going to be done (also to remind to share posts)?
  - random monthly airdrop among all contest participants?
  - restore daily news summaries or not? Does this work well with users RTed contest posts?
- deploy new bot version to prod (double check bot name/account)

NEWS SUMMARiES:

- Hashtags:
  - agent to extract keywords from bot posts, so we can add # (hashtag) in front of some of them
  - extract news post hashtags and provide them as metadata to post loader when building summary. Writer agent might use some of them in the summary post. 

- Use case that could be improved?
  - Summary: "Vitalik plans to create "the splurge".
  - User question: "Where can i get more info about that new "splurge" tech?"
  - Bot reply: "You can check Ethereum's official blog or follow Vitalik Buterin on social media for updates on "The Splurge" tech. They often share insights and developments there."
    -> we might be able to extract some urls. For example in the original source post, we get the https://t.co/vvRijeahpS link that is a blog post that talks about the splurge.
    -> fetch news posts -> extract short urls -> scrap content and get real url + full page content -> analyze web page and save full + summary (+ vectorized for similar searches?) -> attach web page to post in DB -> X replier gets a tool for GPT to get a list of web pages related to some words -> gpt can build its answer using web page data or provide the url as reference.

- Use case to improve:
  - User reply: "What's the BTC price right now?"
  - Bot reply: "We don't provide market price advice, but if I had a crystal ball, I'd be on a beach sipping a cocktail instead of tweeting!"
    -> The question was not about future but current price...
    -> We could provide a token pricing tool to the replier.

- After generating a summary or reply, have a post processing agent to ask if the answer is meaningful text, to filter out hallucinations or buggy texts sometimes returned by GPT.
- replier:
  - more response types - but which ones? what do we want to say?

- List of potential useful tools:
  - Live crypto price access
  - Knowledge base of vector documents from recent blog posts, query by similar words
  - Build, a EVM smart contract
  - Sign and deploy a EVM smart contract


POTENTIAL EXTENSIONS:
- distinct feature set running for each different bot.
- distinct feature configuration for each feature-bot (eg: 2 bots not fetching same posts to build news summaries).